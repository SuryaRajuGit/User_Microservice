// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using User_Microservice.Entity.Models;

namespace User_Microservice.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20230103105315_n5")]
    partial class n5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("User_Microservice.Entity.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Zipcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ba5e478-267b-4291-b947-d8e1fddee4af"),
                            City = "vizag",
                            Country = "India",
                            Line1 = "s-street",
                            Line2 = "ss-street",
                            StateName = "Andhra",
                            Type = "ADMIN",
                            UserId = new Guid("19d869b4-d3c2-4158-9b21-ff3acb5777d6"),
                            Zipcode = "531116"
                        });
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpiryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Phone");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22916f99-599c-4418-aae6-ad9edf978147"),
                            PhoneNumber = "8142255769",
                            Type = "ADMIN",
                            UserId = new Guid("19d869b4-d3c2-4158-9b21-ff3acb5777d6")
                        });
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19d869b4-d3c2-4158-9b21-ff3acb5777d6"),
                            EmailAddress = "surya@gamil.com",
                            FirstName = "Surya",
                            LastName = "Raju",
                            Role = "ADMIN"
                        });
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.UserSecret", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSecret");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85938cc9-c249-456f-9bfd-31351c74dd65"),
                            Password = "7CtkAg/X1ImgPy1BBb61+XUzs6b3iWzI",
                            UserId = new Guid("19d869b4-d3c2-4158-9b21-ff3acb5777d6")
                        });
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.Address", b =>
                {
                    b.HasOne("User_Microservice.Entity.Models.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("User_Microservice.Entity.Models.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.Payment", b =>
                {
                    b.HasOne("User_Microservice.Entity.Models.User", "User")
                        .WithMany("Payment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.Phone", b =>
                {
                    b.HasOne("User_Microservice.Entity.Models.User", "User")
                        .WithOne("Phone")
                        .HasForeignKey("User_Microservice.Entity.Models.Phone", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.UserSecret", b =>
                {
                    b.HasOne("User_Microservice.Entity.Models.User", "User")
                        .WithOne("UserSecret")
                        .HasForeignKey("User_Microservice.Entity.Models.UserSecret", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
