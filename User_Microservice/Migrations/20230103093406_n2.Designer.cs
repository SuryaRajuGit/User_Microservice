// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using User_Microservice.Entity.Models;

namespace User_Microservice.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20230103093406_n2")]
    partial class n2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("User_Microservice.Entity.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Zipcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8fe5f668-ea29-4a2e-bd9e-063e7a6f0b0f"),
                            City = "vizag",
                            Country = "India",
                            Line1 = "s-street",
                            Line2 = "ss-street",
                            StateName = "Andhra",
                            Type = "ADMIN",
                            UserId = new Guid("334f3d2d-4465-4e2f-9e0d-fb4fa0e11d78"),
                            Zipcode = "531116"
                        });
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpiryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Phone");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f643b63-f3ed-4276-9acb-911d2c76ad77"),
                            PhoneNumber = "8142255769",
                            Type = "ADMIN",
                            UserId = new Guid("334f3d2d-4465-4e2f-9e0d-fb4fa0e11d78")
                        });
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("334f3d2d-4465-4e2f-9e0d-fb4fa0e11d78"),
                            EmailAddress = "surya@gamil.com",
                            FirstName = "Surya",
                            LastName = "Raju",
                            Role = "ADMIN"
                        });
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.UserSecret", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSecret");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e35aff6-371c-41c6-86e1-358c7fa404ab"),
                            Password = "7CtkAg/X1ImgPy1BBb61+XUzs6b3iWzI",
                            UserId = new Guid("334f3d2d-4465-4e2f-9e0d-fb4fa0e11d78")
                        });
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.Address", b =>
                {
                    b.HasOne("User_Microservice.Entity.Models.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("User_Microservice.Entity.Models.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.Payment", b =>
                {
                    b.HasOne("User_Microservice.Entity.Models.User", "User")
                        .WithOne("Payment")
                        .HasForeignKey("User_Microservice.Entity.Models.Payment", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.Phone", b =>
                {
                    b.HasOne("User_Microservice.Entity.Models.User", "User")
                        .WithOne("Phone")
                        .HasForeignKey("User_Microservice.Entity.Models.Phone", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User_Microservice.Entity.Models.UserSecret", b =>
                {
                    b.HasOne("User_Microservice.Entity.Models.User", "User")
                        .WithOne("UserSecret")
                        .HasForeignKey("User_Microservice.Entity.Models.UserSecret", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
